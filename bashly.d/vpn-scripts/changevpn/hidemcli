#!/usr/bin/env bash
# This script was generated by bashly 0.8.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
hidemcli_usage() {
  if [[ -n $long_usage ]]; then
    printf "hidemcli - Sample application to change vpn\n"
    echo

  else
    printf "hidemcli - Sample application to change vpn\n"
    echo

  fi

  printf "Usage:\n"
  printf "  hidemcli COMMAND\n"
  printf "  hidemcli [COMMAND] --help | -h\n"
  printf "  hidemcli --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  down     down hide.me vpn"
  echo "  upload   Upload a file"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"

    # :environment_variable.usage
    echo "  USERVPN"
    printf "    Set the username of your vpn of hide.me\n"
    echo

    # :environment_variable.usage
    echo "  PASSVPN"
    printf "    Set the password of your vpn on hide.me\n"
    echo

  fi
}

# :command.usage
hidemcli_down_usage() {
  if [[ -n $long_usage ]]; then
    printf "hidemcli down - down hide.me vpn\n"
    echo

  else
    printf "hidemcli down - down hide.me vpn\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "Usage:\n"
  printf "  hidemcli down [OPTIONS]\n"
  printf "  hidemcli down --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --force, -f"
    printf "    Overwrite existing files\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"

    # :environment_variable.usage
    echo "  DEFAULT_TARGET_LOCATION"
    printf "    Set the default location to download to\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  hidemcli down\n"
    printf "  hidemcli down ./output -f\n"
    echo

  fi
}

# :command.usage
hidemcli_upload_usage() {
  if [[ -n $long_usage ]]; then
    printf "hidemcli upload - Upload a file\n"
    echo

  else
    printf "hidemcli upload - Upload a file\n"
    echo

  fi

  printf "Alias: u\n"
  echo

  printf "Usage:\n"
  printf "  hidemcli upload SOURCE [OPTIONS]\n"
  printf "  hidemcli upload --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --user, -u USER (required)"
    printf "    Username to use for logging in\n"
    echo

    # :flag.usage
    echo "  --password, -p PASSWORD"
    printf "    Password to use for logging in\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  SOURCE"
    printf "    File to upload\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
hidemcli_down_command() {
  # src/down_command.sh
  echo "# this file is located in 'src/down_command.sh'"
  echo "# code for 'hidemcli down' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  hidemeService=$(systemctl list-units --type=service | grep hide.me)

  echo $hidemeService
}

# :command.function
hidemcli_upload_command() {
  # src/upload_command.sh
  echo "# this file is located in 'src/upload_command.sh'"
  echo "# code for 'hidemcli upload' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    hidemcli_usage
    exit
    ;;

  esac

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  down | d )
    action="down"
    shift
    hidemcli_down_parse_requirements "$@"
    shift $#
    ;;

  upload | u )
    action="upload"
    shift
    hidemcli_upload_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    hidemcli_usage >&2
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action" >&2
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
hidemcli_down_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    hidemcli_down_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="down"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --force | -f )

      # :flag.case_no_arg
      args[--force]=1
      shift
      ;;

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
hidemcli_upload_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    hidemcli_upload_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="upload"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --user | -u )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--user]="$2"
        shift
        shift
      else
        printf "%s\n" "--user requires an argument: --user, -u USER" >&2
        exit 1
      fi
      ;;

    # :flag.case
    --password | -p )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--password]="$2"
        shift
        shift
      else
        printf "%s\n" "--password requires an argument: --password, -p PASSWORD" >&2
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[source]+x} ]]; then

        args[source]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key" >&2
        exit 1
      fi

      ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args[source]+x} ]]; then
    printf "missing required argument: SOURCE\nusage: hidemcli upload SOURCE [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.required_flags_filter
  if [[ -z ${args[--user]+x} ]]; then
    printf "missing required flag: --user, -u USER\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "down" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      hidemcli_down_usage
    else
      hidemcli_down_command
    fi

  elif [[ $action == "upload" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      hidemcli_upload_usage
    else
      hidemcli_upload_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
